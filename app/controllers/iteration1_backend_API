All data returned or sent to server is in JSON format.
For return type:

success is of type boolean. info is a string which gives more detailed information for what the action does. data is the returned data from the server

Below only shows the return type of success request. On failure, success is false. info is the reason why the request failed.


RegistrationController:
post  http://base_url/api/vi/registrations
To server:
{ user :{email, password, password_confirm}}
From server:
{success, info, data: {auth_token, email}}
===========================================================================================

SessionController:
post  http://base_url/api/vi/sessions
To server:
{ user :{email, password}}
From server:
{success, info, data: {auth_token, email}}

delete http://base_url/api/vi/sessions
From server:
{success, info}}
===========================================================================================

UserController:
post http://base_url/api/vi/activities
To server:
{activity: { pass in as many fields as possible for the activity to be created}}
From server:
{success, info, data(an activity record)}

get http://base_url/api/vi/activities
From server:
{success, info, data(a list of activity records either the current user joins or hosts; incluse past and future activities)}

post http://base_url/api/vi/requestFriend
To server:
{frienship :{friend_id}} friend_id is the user_id the current user requests to befriend with.
From server:
{success, info}

post http://base_url/api/vi/confirmFriend
To server:
{friendship : {request_id, response}} request_id is the user_id which the current user accepts as friend; response is a boolean which indicates
                                      whether the request is accepted or not
From server:
{success, info, }

get http://base_url/api/vi/getPendingFriends
From server:
{success, info, data(a list of pending friendship requests of the current user)}

get http://base_url/api/vi/getSentRequests
From server:
{success,info, data(a list of friendship requests already sent by the current user)}

post http://base_url/api/vi/deleteRequest
To server:
{friendship :{request_id}} //request_id is the user_id you want to delete your friend request or friend relationship with
From server:
{success,info}

post http://base_url/api/vi/searchUser
To server:
{user: {name}} or {user:{email}} or {user: {id}}
From server:
{success, info, data(a list of users as the research result)}

get http://base_url/api/vi/getFriends
From server:
{success, info, data(a list of all the friends of the current user)}

post http://base_url/api/vi/joinActivity
To server:
{activity:{activity_id, end_time}} // end_time is the end_time for the activity
From server:
{success, info}

get http://base_url/api/vi/getFriendsActivities
From server:
{success, info, data(a list of activity records which the current user's friends join or host; include past and future activities)}








